<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1110"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "01D65EEA23585A6000D52267"
               BuildableName = "framework2.framework"
               BlueprintName = "framework2"
               ReferencedContainer = "container:framework2.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <Testables>
         <TestableReference
            skipped = "NO">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "01D65EF323585A6000D52267"
               BuildableName = "framework2Tests.xctest"
               BlueprintName = "framework2Tests"
               ReferencedContainer = "container:framework2.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "01D65EEA23585A6000D52267"
            BuildableName = "framework2.framework"
            BlueprintName = "framework2"
            ReferencedContainer = "container:framework2.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
      <PostActions>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "Run Script"
               scriptText = "#!/bin/sh&#10;UNIVERSAL_OUTPUTFOLDER=${BUILD_DIR}/${CONFIGURATION}-universal&#10;&#10;# Remove current compiled framework from project&#10;rm &quot;${PROJECT_DIR}/${PRODUCT_NAME}.framework.zip&quot;&#10;rm -r &quot;${PROJECT_DIR}/${PRODUCT_NAME}.framework&quot;&#10;&#10;# Make sure the output directory exists&#10;mkdir -p &quot;${UNIVERSAL_OUTPUTFOLDER}&quot;&#10;&#10;# Next, work out if we&apos;re in SIM or DEVICE&#10;xcodebuild -target &quot;${PRODUCT_NAME}&quot; -configuration ${CONFIGURATION} VALID_ARCHS=&quot;x86_64 i386&quot; -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO BUILD_DIR=&quot;${BUILD_DIR}&quot; BUILD_ROOT=&quot;${BUILD_ROOT}&quot; clean build&#10;xcodebuild -target &quot;${PRODUCT_NAME}&quot; ONLY_ACTIVE_ARCH=NO -configuration ${CONFIGURATION} -sdk iphoneos  BUILD_DIR=&quot;${BUILD_DIR}&quot; BUILD_ROOT=&quot;${BUILD_ROOT}&quot; clean build&#10;&#10;# Step 2. Copy the framework structure (from iphoneos build) to the universal folder&#10;cp -r &quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/${PRODUCT_NAME}.framework&quot; &quot;${UNIVERSAL_OUTPUTFOLDER}/&quot;&#10;&#10;# Step 3. Copy Swift modules from iphonesimulator build (if it exists) to the copied framework directory&#10;BUILD_PRODUCTS=&quot;${SYMROOT}/../../../../Products&quot;&#10;&#10;cp -r &quot;${BUILD_PRODUCTS}/Debug-iphonesimulator/${PRODUCT_NAME}.framework/Modules/${PRODUCT_NAME}.swiftmodule/.&quot; &quot;${UNIVERSAL_OUTPUTFOLDER}/${PRODUCT_NAME}.framework/Modules/${PRODUCT_NAME}.swiftmodule&quot;&#10;&#10;# Step 4. Create universal binary file using lipo and place the combined executable in the copied framework directory&#10;lipo -create -output &quot;${UNIVERSAL_OUTPUTFOLDER}/${PRODUCT_NAME}.framework/${PRODUCT_NAME}&quot; &quot;${BUILD_PRODUCTS}/Debug-iphonesimulator/${PRODUCT_NAME}.framework/${PRODUCT_NAME}&quot; &quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/${PRODUCT_NAME}.framework/${PRODUCT_NAME}&quot;&#10;&#10;# Step 5. Convenience step to copy the framework to the project&apos;s directory&#10;cp -r &quot;${UNIVERSAL_OUTPUTFOLDER}/${PRODUCT_NAME}.framework&quot; &quot;${PROJECT_DIR}&quot;&#10;&#10;# Step 6. Zip the framework along with license file&#10;cd &quot;${PROJECT_DIR}&quot;&#10;zip -r &quot;${PRODUCT_NAME}.framework.zip&quot; &quot;LICENSE&quot; &quot;${PRODUCT_NAME}.framework&quot; &amp;&amp; shasum -a 256 &quot;${PRODUCT_NAME}.framework.zip&quot; &gt; &quot;${PRODUCT_NAME}.framework.checksum.txt&quot;&#10;&#10;# Step 7. Convenience step to open the project&apos;s directory in Finder&#10;open &quot;${PROJECT_DIR}&quot;&#10;&#10;">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "01D65EEA23585A6000D52267"
                     BuildableName = "framework2.framework"
                     BlueprintName = "framework2"
                     ReferencedContainer = "container:framework2.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
      </PostActions>
   </ArchiveAction>
</Scheme>
